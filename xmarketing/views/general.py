# -*- coding: utf-8 -*-
import datetime
import os
import hashlib
import base64
import xfocr
from flask import Blueprint, request, redirect, url_for, render_template, flash, session
from xmarketing.db import Session, Visitor
from xmarketing.util import Result
from xmarketing import app
import logging, json
from PIL import Image
# import sendmail

mod = Blueprint('general', __name__)
logger = logging.getLogger('Xmarketing')


@mod.route('/visitor-record', methods=['GET', 'POST'])
def visitor_record():
    args = request.args if request.method == 'GET' else request.form

    new_visitor = Visitor(visitor_name = args.get('name'),
                          company_name = args.get('company'),
                          title = args.get('title'),
                          email = args.get('email'),
                          website = args.get('website'),
                          address = args.get('address'),
                          telephone = args.get('phone'),
                          mobile = args.get('mobile'),
                          application = args.get('application'),
                          prefered_products = (',').join(args.getlist('product')),
                          pic_path = args.get('pic_path'),
                          preference = (',').join(args.getlist('preference')),
                          create_time = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')
                          )

    Session.add(new_visitor)
    Session.commit()
    print(json.dumps(Result().success().set_message('success').to_dict()))

    return '''
    <!doctype html>
    <title>X-marketing</title>
    <br><br><br><br><br><br><br><br><br><br><br><br><br><br>
    <h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%s</h1>
    <h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="../index">Back To Index</a></h1>
    ''' %(json.dumps(Result().success().set_message('success').to_dict()))

    # sendmail.send(app.config)

'''
    Return whether the uploaded img file is in proper type
'''
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/')
@app.route('/index')
def index():
    return render_template('index.html')

@app.route('/success')
def success():
    return render_template('success.html', data = session['card'])

@app.route('/uploading', methods = ['POST'])
def onUpload():
    if 'file' not in request.files:
        flash('No file part')
        return redirect(request.url)
    file = request.files['file']
    # if user does not select file, browser also submit an empty part without filename
    if file.filename == '':
        flash('No selected file')
        return redirect(request.url)
    if file and allowed_file(file.filename):
        # unique file name generated by using timestamp
        filename = datetime.datetime.now().strftime("%Y%m%d%H%M%S")+'.'+file.filename.rsplit('.', 1)[1].lower()
        # file saving
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        # full file path combined
        upload_file = app.config['UPLOAD_FOLDER'] + filename
        img_path = app.config['OPTIMIZE_FOLDER'] + filename
        app.logger.info('Uploaded image file has been saved as [{0}]'.format(upload_file))

        # img file compression
        img = Image.open(upload_file)
        img = img.resize((1024,768),Image.ANTIALIAS)
        img.save(img_path,optimize=True,quality=95)
        app.logger.info('Image file has been compressed as [{0}]'.format(img_path))

        # XF OCR start
        recv_json = xfocr.businesscard_recognize(img_path)

        # recv_json = json.loads(recv_str)

        if recv_json['code'] != '0':
            return 'Sorry, recognition failed...'

        # Retrieve data from recognition result json
        session['card'] = data_retrv(recv_json, img_path)

        return redirect(url_for('success'))

def data_retrv(recv_json, filename):
    result = {'filename':filename}
    data = recv_json['data']
    for attr in data:
        if attr == 'formatted_name' and ('visitor_name' not in result):
            result['visitor_name'] = data[attr][0]['item']
            continue
        if attr == 'title' and 'title' not in result:
            result['title'] = data[attr][0]['item']
            continue
        if attr == 'organization' and 'company_name' not in result:
            if 'name' in data[attr][0]['item']:
                result['company_name'] = data[attr][0]['item']['name']
            continue
        if attr == 'label' and 'address' not in result:
            result['address'] = data[attr][0]['item']['address']
            continue
        if attr == 'email' and 'email' not in result:
            result['email'] = data[attr][0]['item']
            continue
        if attr == 'url' and 'website' not in result:
            result['website'] = data[attr][0]['item']
            continue
        if attr == 'telephone' and 'telephone' not in result:
            result['telephone'] = data[attr][0]['item']['number']
            if len(data[attr]) > 1 and 'mobile' not in result:
                result['mobile'] = data[attr][1]['item']['number']
                continue

    app.logger.info('Business Card Retrieval Completed [{0}]'.format(result))
    return result

def recognition(pic_uri):
    return ocr.businesscard_recognize(app.config['APPID'], pic_uri)

def cos_upload(filestorage, filename):
    from qcloud_cos import CosConfig
    from qcloud_cos import CosS3Client
    secret_id = 'AKIDrdEeu1a0lLwNcfuN8h4SeigV9brygIEz'      # 替换为用户的 secretId
    secret_key = 'ra8UefW1OahrpbCbopdJo8IG4hASaYUH'      # 替换为用户的 secretKey
    region = 'ap-beijing'     # 替换为用户的 Region
    token = ''                  # 使用临时密钥需要传入 Token，默认为空，可不填
    config = CosConfig(Secret_id=secret_id, Secret_key=secret_key, Region=region, Token=token)
    client = CosS3Client(config)
    with filestorage.stream as fp:
        response = client.put_object(
            Bucket='epcdev-1252954035',
            Body=fp,
            Key=filename,
            StorageClass='STANDARD',
            ContentType='image/jpeg; charset=utf-8'
        )
    print(response)
